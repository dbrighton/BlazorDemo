@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ChessState> State
@inject IMatDialogService MatDialogService

<div>
    <button class="btn btn-primary float-end" @onclick="NewGame">New Game</button>
    <BlazmGrid Data="Games" PageSize="10" Sortable="true">
        <GridColumns>
            <GridColumn Field="@nameof(ChessGame.CreateBy)" Priority="0"></GridColumn>
            <GridColumn Field="@nameof(ChessGame.LastUpdateTimestamp)" Priority="1">
                <Template>
                    
                    @{
                        var target = context as ChessGame;
                        var localTime = target.LastUpdateTimestamp.ToLocalTime();
                    }
                    @localTime
                </Template>
            </GridColumn>
            <GridColumn Class="alignRight">
                <Template>
                    @{
                        var target = context as ChessGame;
                    }
                    <button class="btn btn-outline-primary" @onclick="@( ()=>  JoinGame(target))">Join</button>
                </Template>
            </GridColumn>
        </GridColumns>
    </BlazmGrid>
</div>

@code{

    public List<ChessGame> Games { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new StartHubAction());
        SubscribeToAction<GameListChangedSuccessAction>(payload => { Games = payload.Games; });
    }


    private async Task NewGame()
    {
        var result = await MatDialogService.PromptAsync("What is your name?");
        if (!string.IsNullOrWhiteSpace(result))
        {
            var chessPlayer = new ChessPlayer
            {
                Name = result
            };
            Dispatcher.Dispatch(new ChessNewGameAction(chessPlayer));
        }
    }

    private void  JoinGame(ChessGame game)
    {
        Dispatcher.Dispatch(new JoinChessGameSuccessAction(game));
    }

    private string ToLocalTime(DateTime timeStamp)
    {
        return timeStamp.ToLocalTime().ToString();
    }
   

}