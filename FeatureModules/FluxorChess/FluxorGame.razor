
@using FluxorChess.Utils
@inherits FluxorComponent
@inject IState<ChessState> State
@inject IDispatcher Dispatcher

<table class="chess-board">
    @for (int row = 8; row >= 1; row--) // Start from 8 and go down to 1 for rows
    {
        <tr>
            @for (int col = 1; col <= 8; col++)
            {
                var cellId = $"{(char)(col + 96)}{row}"; // e.g., "a8", "b8", ... "h1"
                var piece = GetChessPiece(cellId);
                <td>

                    <ChessCell
                        Ctrl CellId="@cellId" ChessPiece="@piece"></ChessCell>
                </td>
            }
        </tr>
    }
</table>

@* <MatVirtualScroll></MatVirtualScroll> *@

@code
{
    private ChessGame _game;

    [Parameter]
    public ChessGame Game
    {
        get => _game;
        set => _game = value;
    }




    protected override void OnInitialized()
    {

        base.OnInitialized();
        Dispatcher.Dispatch(new ChessPiecesUpdateSuccess(Game.Reset()));
    }

    private ChessPiece? GetChessPiece(string cellId)
    {
        
        var target = (from i in State.Value.CurrentGame.ChessPieces
                     where i.CellId == cellId
                     select i).FirstOrDefault();

        return target;
    }
}
